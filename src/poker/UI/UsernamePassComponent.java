/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package poker.UI;

//import poker.UI.Framework.Component;
import java.util.ArrayList;
import poker.UI.Framework.Model;
import poker.UI.Framework.Updatable;

/**
 *
 * @author MDA 174321 :)
 */
public class UsernamePassComponent extends javax.swing.JPanel implements Updatable {
    private String myId;
    ArrayList<Updatable> myComponents = new ArrayList();

    public UsernamePassComponent() {
        initComponents();
        username_textInputField.set("Username:", "", "");
        password_textInputField.set("Password:", "", "");
    }
    
    public LoginModel getModelData(){
        TextInputFieldModel usernameInput = username_textInputField.getModelData();
        TextInputFieldModel passwordInput = password_textInputField.getModelData();
        return new LoginModel(usernameInput.myInputFieldText,"", passwordInput.myInputFieldText, ""); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        username_textInputField = new poker.UI.TextInputFieldComponent();
        password_textInputField = new poker.UI.TextInputFieldComponent();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(username_textInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(password_textInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(username_textInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(password_textInputField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void Update(Model aModel) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public String getUpdateId() {
        return myId;
    }

    @Override
    public void setUpdateId(String aId) {
        myId = aId;
    }

    @Override
    public boolean UpdateComponent(String aComponentId, Model aModel) {
        for(Updatable u:myComponents){
            if(u.getUpdateId().equals(aComponentId)){
                u.Update(aModel);
                return true;
            }
        }
        return false;
    }
    
    // TODO: repeated behaviour, do we need a generalization to handle lists?
    // add<SomeObject>()
    // <SomeObject>Exists()
    // get<SomeObject>ById()
    
    // Other suspect objects:
    // Component.java
    // UserModule.java
    public boolean addComponent(Updatable aComponent){
        if (aComponent != null){
            if(!componentExists(aComponent)){
                myComponents.add(aComponent);
                return true;
            }
        }
        return false;
    }
    
    public boolean componentExists(Updatable aComponent){
        return myComponents.contains(aComponent);
    }
    
    // NOTE: Inefficient search algorithm, replace myComponents with a data structure that supports better search
    // algorithms for improved efficiency
    public Updatable getComponentById (String aComponentId){
        for(Updatable u:myComponents){
            if(u.getUpdateId().equals(aComponentId)){
                return u;
            }
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private poker.UI.TextInputFieldComponent password_textInputField;
    private poker.UI.TextInputFieldComponent username_textInputField;
    // End of variables declaration//GEN-END:variables
}
